!<arch>
0-isupper.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _isupper - check if alphabet uppercase
 * Return:always 0 (success)
 * @c : the character ASCII code
*/
int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     263       `
#include "main.h"
/**
 * _memset - Entry point
 * @s : pointed destination
 * @b : constant byte
 * @n : bytes
 * Return: Always 0 (Success)
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}

0-strcat.c/     0           0     0     644     392       `
#include "main.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/**
 * _strcat - concatenates two strings
 * Return: void
 * @dest : input string
 * @src : input string
*/
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
dest[i] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     478       `
#include "main.h"
/**
 * _atoi - converts a string to an integer.
 * @s: the string to convert
 * Return: the converted string.
 */
int _atoi(char *s)
{
	short boolean;
	int i, min, result;

	i = min = result = boolean = 0;
	min = -1;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
			min *= -1;

		if (s[i] >= '0' && s[i] <= '9')
		{
			result *= 10;
			result -= (s[i] - '0');
			boolean = 1;
		}
		else if (boolean == 1)
			break;
		i++;
	}
	result *= min;
	return (result);
}
1-isdigit.c/    0           0     0     644     205       `
#include "main.h"
#include <ctype.h>
/**
 * _isdigit - check if digit
 * Return: 0 or 1 (success)
 * @c : the input integer
*/
int _isdigit(int c)
{
if (isdigit(c) == 0)
{
return (0);
}
else
return (1);
}

1-memcpy.c/     0           0     0     644     401       `
#include <stdio.h>
#include <string.h>
#include "main.h"
/**
 * _memcpy - a function that copy memory area
 * @dest : memory where is stored
 * @src : memory where is copied
 * @n : number of bytes
 * Return: copied memory with n bytes changed
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	   int r = 0;
	   int i = n;

for (r = 0; r < i; r++)
{
dest[r] = src[r];
n--;
}
return (dest);
}

1-strncat.c/    0           0     0     644     440       `
#include "main.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/**
 * char *_strncat - concatenates two strings
 * Return: dest
 * @dest : input string
 * @src : input string
 * @n : input integer
*/
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     50        `
#include "main.h"
char *_strchr(char *s, char c);
2-strlen.c/     0           0     0     644     41        `
#include "main.h"
int _strlen(char *s);


2-strncpy.c/    0           0     0     644     65        `
#include "main.h"
char *_strncpy(char *dest, char *src, int n);


3-islower.c/    0           0     0     644     39        `
#include "main.h"
int _islower(int c);

3-puts.c/       0           0     0     644     40        `
#include "main.h"
void _puts(char *s);

3-strcmp.c/     0           0     0     644     52        `
#include "main.h"
int _strcmp(char *s1, char *s2);

3-strspn.c/     0           0     0     644     64        `
#include "main.h"
unsigned int _strspn(char *s, char *accept);

4-isalpha.c/    0           0     0     644     40        `
#include "main.h"
int _isalpha(int c);

4-strpbrk.c/    0           0     0     644     57        `
#include "main.h"
char *_strpbrk(char *s, char *accept);

5-strstr.c/     0           0     0     644     63        `
#include "main.h"
char *_strstr(char *haystack, char *needle);

6-abs.c/        0           0     0     644     35        `
#include "main.h"
int _abs(int n);

9-strcpy.c/     0           0     0     644     64        `
#include "main.h"
char *_strncpy(char *dest, char *src, int n);
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

